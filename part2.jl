### A Pluto.jl notebook ###
# v0.19.25

using Markdown
using InteractiveUtils

# This Pluto notebook uses @bind for interactivity. When running this notebook outside of Pluto, the following 'mock version' of @bind gives bound variables a default value (instead of an error).
macro bind(def, element)
    quote
        local iv = try Base.loaded_modules[Base.PkgId(Base.UUID("6e696c72-6542-2067-7265-42206c756150"), "AbstractPlutoDingetjes")].Bonds.initial_value catch; b -> missing; end
        local el = $(esc(element))
        global $(esc(def)) = Core.applicable(Base.get, el) ? Base.get(el) : iv(el)
        el
    end
end

# ‚ïî‚ïê‚ï° 3d1cc3c8-dc80-11ed-3163-9d457a2fc8f2
begin
	using Pkg
	Pkg.activate(".")
	using PlutoUI
	import Distances
	using Plots
	using Random: shuffle, seed!
	using PlutoTeachingTools
	using StatsBase: samplepair
	using DataFrames
	using Test
	using Distributions
	using Printf
	using Logging
	verbose = SimpleLogger(Logging.Debug)
	muestra_log(a)=with_logger(a,verbose)
	PlutoTeachingTools.set_language!(PlutoTeachingTools.get_language_from_env())
	PlutoUI.TableOfContents(title="üìö √çndice", indent=true)
end

# ‚ïî‚ïê‚ï° f8623f68-7151-4416-9ffe-87d704ce0aff
md"# Resolviendo el TSP con Metaheur√≠sticas, Parte 2: Algoritmos Gen√©ticos"

# ‚ïî‚ïê‚ï° 421c26f4-e9fe-4f53-917f-4ade85d96cc7
md"""
## Sobre este documento

Este documento forma parte del **Proyecto de Innovaci√≥n Docente Desarrollo de herramientas web interactivas para el aprendizaje de Metaheur√≠sticas** asociado a la asignatura de Metaheur√≠sticas que se imparte para el _Grado en Ingenier√≠a Inform√°tica_ (aunque abierta a grados dobles) en la **Universidad de Granada (UGR)**.

En este sistema interactivo se mostrar√° c√≥mo se puede aplicar un problema concreto, el _Viajante de Comercio_ para resolverlo con distintas metaheur√≠sticas, algo semejante a lo que tienen que hacer los y las estudiantes de la asignatura, pero con problemas distintos. Al igual que las pr√°cticas de la asignatura, este entorno web est√° dividido en tres partes, cada una de ellas abordando distintas metaheur√≠sticas sobre el mismo problema.
"""

# ‚ïî‚ïê‚ï° ab1e47c3-3dab-4982-a7ec-7fdd196f5d24
md"""
## Instrucciones

Este documento est√° en formato [Pluto](https://plutojl.org/) para ofrecer un entorno reactivo, lo cual quiere decir que se pueden pulsar botones o cambiar valores usando elementos visuales (como Select, sliders, ...) y el sistema se
actualiza.

El c√≥digo fuente disponible est√° en el lenguaje de programaci√≥n [Julia](https://julialang.org/), que es muy similar a Python. Lo he escogido porque es muy legible, similar al seudoc√≥digo pero al mismo tiempo es ejecutable. Se puede seleccionar *Edit in binder* y se podr√° editar en una copia local.

!!! warning

	Aunque Julia es muy similar a Python hay algunas diferencias, comentar√© las m√°s notables: 
    - Los vectores se acceden desde la posici√≥n 1 hasta tam, en vez de desde la posici√≥n 0 hasta tam-1 (siendo tam el  tama√±o del vector). 
    - Los rangos se ponen como 1:N, ambos inclu√≠dos, y no range(1, N+1) como en Python.
    - Julia ya tiene soporte para vectores y matrices, no es necesario usar una librer√≠a como _numpy_ en Python.
	- Dentro de una cadena se puede usar $ para mostrar los valores de una variable (similar al fmt de Python).
	- La instrucci√≥n con "." indica que se hace para todos los elementos, por lo que vector1 .= vector2 copia todo el vector, y all(vector1 .== vector2) comprueba que todos los elementos de ambos vectores sean iguales.

	Hay recursos _online_ para ver ciertas [diferencias entre Python y Julia](https://towardsdatascience.com/moving-code-from-python-to-julia-beware-of-false-friends-160573a5d552), pero no es necesario profundizar para entender los algoritmos y "_jugar_", si se quiere, con el c√≥digo. 
"""

# ‚ïî‚ïê‚ï° ba86256b-134b-4309-88ad-4bf9296c7d42
TwoColumnWideLeft(
md"""
## El problema del Viajante de Comercio

El problema del Viajante de Comercio (_Travelman Salesman Problem_, TSP) es un problema conocido de la literatura, en el que existe un viajante que debe de recorrer una serie de ciudades y desea encontrar la mejor ruta para ello. Por tanto, el problema consiste en:

- Encontrar la ruta m√°s corta entre todas las ciudades.
- Pasar por cada ciudad √∫nicamente una vez.
- Volver a la ciudad origen.

El objetivo es encontrar la asignaci√≥n $S$ que minimiza:
```math
\displaystyle \sum_{i=0}^{N-1}Distancia({S_i,S_{i+1}}) + Distancia({S_N,S_0})
```
""",RobustLocalResource("https://images.danimolina.net/TSP.jpg", "TSP.jpg"))

# ‚ïî‚ïê‚ï° 903c9853-acdc-4495-855d-3d4ce2242bf3
begin
	function description(fname)
		open(fname) do file
			line = readline(file)
			(attrib, val) = split(line, ":") .|> strip
			
			while (attrib != "COMMENT")
				line = readline(file)
				(attrib, val) = split(line, ":") .|> strip
			end
			return val |> strip
		end
	end
	fnames = filter(endswith("tsp"), readdir("data", join=true))
	md"""
Para abordar el problema usaremos un conjunto de ciudades de TSP sacadas del [TSPlib](http://comopt.ifi.uni-heidelberg.de/software/TSPLIB95/)

Escoge un problema: 
$(@bind fname Select([name => description(name) for name in fnames], default=fnames[5]))
"""
end

# ‚ïî‚ïê‚ï° 85e41585-b696-42e7-80d5-0c980a30a536
begin
	begin
	function read_TSP(fname)
		@assert isfile(fname)
	
		open(fname) do file
			line = readline(file)
			N = 0

			while (contains(line, ":"))
				(atrib,val) = split(line, ":") .|> strip
				if atrib == "DIMENSION"
					N = parse(Int, val)
				end
				line = readline(file) |> strip
			end
			@assert line == "NODE_COORD_SECTION"
			local distances = zeros(Float32, N, N)
			local position_cities = Matrix{Float32}(undef, 2, N)
			
			for i in 1:N
				line = readline(file)
				(_, x, y) = split(line, " ", keepempty=false)
				x, y = parse.(Ref(Float32), (x, y))
				position_cities[1,i] = x
				position_cities[2,i] = y
			end
			#posi = transpose(position_cities)
			distances = Distances.pairwise(Distances.Euclidean(), position_cities, dims=2);
			return N, position_cities, distances;
		end
	end
end
	const N, Position_cities, Distances_cities = read_TSP(fname)
	nothing
end

# ‚ïî‚ïê‚ï° 929dbc59-8d47-438c-aa6b-a797cf8cdb73
begin
	function plot_TSP(options=Dict{}())
		global Position_cities
		position_cities = Position_cities
		scatter(position_cities[1,:], position_cities[2,:]; title=description(fname), legend=false, axis=false, options...)
	end
	plot_TSP()
end

# ‚ïî‚ïê‚ï° 04437555-ddb3-49b6-98cc-cf5687af4c08
md"""
# Aplicando Algoritmos Gen√©ticos

Vamos a aplicar Algoritmos Gen√©ticos para resolver el problema. En particular vamos a aplicar un Algoritmo Gen√©tico Generacional y un Algoritmo Gen√©tico Estacionario.

Los algoritmos gen√©ticos son algoritmos poblacionales, en los que se mantiene no una soluci√≥n, sino un conjunto de soluciones en memoria, que son combinados para generar nuevas soluciones, de esa manera la poblaci√≥n de soluciones va evolucionando hacia mejores soluciones. 

Se basa en la heur√≠stica/idea de que combinando soluciones buenas pueden obtenerse soluciones mejores.
"""

# ‚ïî‚ïê‚ï° 08bec682-efa6-4bc0-b739-0ddd02f8f0d8
md"""
## Algoritmo Gen√©tico Generacional

El esquema se visualiza a continuaci√≥n:

Mientras no se cumpla el criterio de parada, es decir, mientras no se haya generado un n√∫mero m√°ximo de evaluaciones, se aplican sucesivamente las siguientes fases:

$(RobustLocalResource("https://images.danimolina.net/agg.png", "agg.png"))

- Selecci√≥n: Se seleccionan soluciones de la poblaci√≥n original para constituir una poblaci√≥n de igual tama√±o. Se seleccionan de forma aleatoriamente, pero normalmente con mayor tendencia a escoger las que presenten mayor fitness.

- Cruce: Se cruzan pares de soluciones para crear nuevas soluciones, reemplazando a las originales. Dado que tras la selecci√≥n las soluciones est√°n desordenadas, se pueden combinar por pares (la 1 con la 2¬™, la 3¬™ con la 4¬™, ...). No todas son cruzadas, solo el P\_c % de pares.

- Mutaci√≥n: Con una cierta probabilidad P_mut muy baja, se mutan las nuevas soluciones, mediante un cambio muy peque√±o.

- Reemplazo: Las nuevas soluciones, la nueva poblaci√≥n, reemplaza a la poblaci√≥n anterior. Para evitar perder la mejor soluci√≥n anterior, se copia en la nueva si no est√°.

A continuaci√≥n vamos a ver la implementaci√≥n.
"""

# ‚ïî‚ïê‚ï° 6f75ee5e-8b40-42ae-b59f-fc17a2c16800
md"""
## Algoritmo Gen√©tico Estacionario

El esquema se visualiza a continuaci√≥n:

Mientras no se cumpla el criterio de parada, es decir, mientras no se haya generado un n√∫mero m√°ximo de evaluaciones, se aplican sucesivamente las siguientes fases:

$(RobustLocalResource("https://images.danimolina.net/age.png", "age.png"))

- Selecci√≥n: Se seleccionan dos soluciones de la poblaci√≥n original. Se seleccionan de forma aleatoriamente, pero normalmente con mayor tendencia a escoger las que presenten mayor fitness.

- Cruce: Se cruzan el par de soluciones seleccionadas para crear dos nuevas soluciones, reemplazando a las originales.

- Mutaci√≥n: Con una cierta probabilidad P_mut muy baja, se mutan las nuevas soluciones, mediante un cambio muy peque√±o.

- Reemplazo: Las nuevas soluciones, reemplazan a las dos peores si las mejoran, es elitista por naturaleza.

A continuaci√≥n vamos a ver la implementaci√≥n.
"""

# ‚ïî‚ïê‚ï° e07d5db1-fedb-4883-9e7b-42bbeb1196c4
md"""
## Experimentos
"""

# ‚ïî‚ïê‚ï° e8ccadcf-ae4d-4014-a3bc-0d08b1c7fb58
begin
md"""
Vamos a aplicarlo. El Tiempo Real indica que conforme se actualice el control deslizante se ejecuta. Si no se marca se eval√∫an hasta el m√°ximo de evaluaciones y luego. Es recomendable solo usar el Modo en Tiempo Real en problemas peque√±os.

$(@bind ag_number_evals confirm(NumberField(1000:1000:50_000, default=1000)))
$(@bind online MultiCheckBox([\"Modo Tiempo Real\"]))
"""
end

# ‚ïî‚ïê‚ï° 441219bc-c438-4159-ad1e-8441cdd850e9
@bind boton_seed Button("Inicia Semilla")

# ‚ïî‚ïê‚ï° 4e1cf32a-9387-4b6b-b324-d5ecb14e614d
begin 
	boton_seed
	seed_value = rand(DiscreteUniform(0, 3000))
	md"""
Semilla: $(seed_value)
"""
end	

# ‚ïî‚ïê‚ï° abb709a1-7344-4e84-a24f-443caed0fc00
md"""
Evaluaciones AGG: $(@bind global_evals_agg Slider(50:50:ag_number_evals))
"""

# ‚ïî‚ïê‚ï° 1ca679ff-faf5-4194-9da3-3f8811bb3049
md"""
Evaluaciones AGE: $(@bind global_evals_age Slider(50:50:ag_number_evals))
"""

# ‚ïî‚ïê‚ï° ddb0cea0-dfd7-40a7-a6c3-8dbb68c042d3
if isempty(online)
md"""
Evaluaciones AGG y AGE: $(@bind global_evals_ag Slider(50:50:ag_number_evals))
"""
end

# ‚ïî‚ïê‚ï° 2af35bfb-b24f-4210-a0a1-af4879ced7f9
md"""
# AG Generacional Vs AG Estacionario

Vamos a comparar los resultados de ambos para el problema **$(basename(fname))** con **$(ag_number_evals)** evaluaciones.
"""

# ‚ïî‚ïê‚ï° 482a3d43-77b0-4f1a-b2ad-c9ded08f0226
md"""
# Operadores Comunes
"""

# ‚ïî‚ïê‚ï° bffa1ef7-b779-46ae-9306-3364aaf0e729
md"""
## Crear una soluci√≥n

Para crear una soluci√≥n desordenamos un vector de √≠ndices.
"""

# ‚ïî‚ïê‚ï° 7d4b2a03-b544-4e7b-a096-a2f97dcaddfa
function indices_ordenados(vector)
	return sortperm(vector)
end

# ‚ïî‚ïê‚ï° d098ac9b-526e-47a6-963f-a61b5265e886
"""
	new_solution(N)

Permite generar una nueva soluci√≥n/permutaci√≥n de tama√±o N.

### Parametros: 
- N: Tama√±o de la soluci√≥n.
"""
function new_solution(N)
	return shuffle(1:N)
end

# ‚ïî‚ïê‚ï° acfbad57-b07e-48b4-bb92-ef35350240b7
md"""
Vamos a ver varios ejemplos:
"""

# ‚ïî‚ïê‚ï° a647901b-50e1-4430-a85c-2b50c8eae0ff
for _ in 1:5
	local nueva_solucion = new_solution(10)
	@show nueva_solucion
end

# ‚ïî‚ïê‚ï° f890be4d-60db-4424-99ab-0286ef9b47dd
md"""
## Evaluar una soluci√≥n

El siguiente c√≥digo muestra c√≥mo se puede evaluar una soluci√≥n.
"""

# ‚ïî‚ïê‚ï° 307784a8-a5f1-4d1c-b228-6c76d26bd863
"""
	fitness(solution)

Devuelve la longitud de la soluci√≥n pasada por par√°metro.

### Parametros:

- solution: Soluci√≥n a evaluar.

### Devuelve: La distancia (como valor real).

"""
function fitness(solution)
	distances = Distances_cities
	total = 0.0
	tam = length(solution)

	# Voy sumando los resultados de cada tramo del trayecto
	for i in 1:(tam-1)
		total += distances[solution[i],solution[i+1]]
	end
	# Le sumo la distancia de la √∫ltima a la primera
	total += distances[solution[tam],solution[1]]
	return total
end

# ‚ïî‚ïê‚ï° 76bad016-e20e-4491-b7e2-c47b7eec0a20
begin
	function plot_sol(sol; title="")
		positions = Position_cities
		fit_sol = fitness(sol)
		if isempty(title)
			title = "Fitness: $(round(fit_sol, digits=2))"
		end
		plt = plot_TSP(Dict(:markersize=>3, :color=>:black, :title=>title))
		for i in 1:(length(sol)-1)
			ant = sol[i]
			next = sol[i+1]
			plot!(plt, positions[1,[ant,next]], positions[2,[ant,next]], color=:gray, style=:dash, linealpha=3)
		end
		plot!(plt, positions[1,[sol[end],sol[begin]]], positions[2,[sol[end],sol[begin]]], color=:gray, style=:dash, linealpha=0.5)
		plt
	end
	md"""
Vamos a visualizar soluciones aleatorias $(@bind boton_new Button(\"Nueva Aleatoria\"))
"""
end

# ‚ïî‚ïê‚ï° ac6d750a-658d-4357-b912-4569c61e23ac
begin
	boton_new
	local solution = new_solution(N)
	plot_sol(solution)
end

# ‚ïî‚ïê‚ï° cb7e1e27-f497-47cb-9fac-1f96c19c99f3
md"""
## Mutaci√≥n de una soluci√≥n

Consideramos que si una soluci√≥n muta se intercambian dos posiciones aleatorias.
"""

# ‚ïî‚ïê‚ï° dfd2a922-c497-47f5-992f-d23ae107683b
"""
	mutation(solution)

Muta una soluci√≥n cambiando dos posiciones aleatorias.

### Par√°metros:
- solution: Soluci√≥n a mutar.

### Devuelve: Nueva soluci√≥n mutada.
"""
function mutation(solution; verbose=false)
	dim = length(solution)
	pos1, pos2 = samplepair(1:dim)

	if verbose
		@debug "Intercambio posiciones $pos1 y $pos2"
	end
	mutation_sol = copy(solution)
	mutation_sol[pos2], mutation_sol[pos1] = solution[pos1], solution[pos2]
	return mutation_sol
end

# ‚ïî‚ïê‚ï° 170b110d-d1f2-4d3c-a1f7-cf7ac6075a69
md"Vamos a mostrar un ejemplo $(@bind boton_muta Button(\"Muta aleatorio\"))"

# ‚ïî‚ïê‚ï° 40df03c1-78d5-4720-a00a-c0ed749fdc85
begin
	boton_muta
	local solution = new_solution(10)
	mutated_solution = mutation(solution, verbose=true)
	@debug "Original: $solution"
	@debug "Tras Mutar: $mutated_solution"
	nothing
end

# ‚ïî‚ïê‚ï° 5be982d9-0e21-44e7-91e9-34d9ae6b1a2b
md"Vamos a mostrarlo visualmente $(@bind visual_mutacion Button(\"Mostrar mutaci√≥n\"))"

# ‚ïî‚ïê‚ï° c940c590-18a4-4885-9cc0-54f5b11d64b9
begin 
	function plot_cities!(plot, solution, posi; color=:red)
		positions = Position_cities
		scatter!(plot, positions[1,solution[posi]], positions[2,solution[posi]], color=color)
	end
	function plot_edge!(plot, solution, posi; color=:red)
		dim = length(solution)
		positions = Position_cities
		newposi = ifelse(posi < dim, posi+1, 1)
		prevposi = (posi > 1 ? posi - 1 : dim)
		plot
		plot!(plot, positions[1, solution[[posi, newposi]]], positions[2, solution[[posi,newposi]]], color=color)
		plot!(plot, positions[1, solution[[prevposi, posi]]], positions[2, solution[[prevposi,posi]]], color=color)
	end
	function plot_mutation(solution)
		sol = solution
		dim = length(solution)
		pos1, pos2 = samplepair(1:dim)
		newsolution = copy(solution)
		newsolution[[pos2,pos1]] = solution[[pos1, pos2]]
		
		p1 = plot_sol(solution; title="Soluci√≥n Original")
		p2 = plot_sol(newsolution; title="Soluci√≥n Cambiada")

		@animate for i in 1:5
			if i == 1
				p1 = plot_sol(solution; title="Soluci√≥n Original")
				p1
			elseif i == 2
				plot_cities!(p1, solution, [pos1, pos2]; color=:red)
				p1
			elseif i == 3
				plot_edge!(p1, solution, pos1, color=:orange)
				plot_edge!(p1, solution, pos2, color=:orange)
				p1
			elseif i == 4
				plot_cities!(p2, newsolution, [pos1, pos2]; color=:green)
				plot_edge!(p2, newsolution, pos1, color=:green)
				plot_edge!(p2, newsolution, pos2, color=:green)
				p2
			else
				plot_sol(newsolution; title="Soluci√≥n Final")
			end
		end
	end

	visual_mutacion
	anim = plot_mutation(new_solution(N))
	gif(anim, "anim_mutation.gif", fps = 0.5, loop=0, show_msg=false)
	#PlutoUI.LocalResource("anim_fps15.gif")
end

# ‚ïî‚ïê‚ï° f8992c2b-62f5-4a9b-8801-3fb99a8dfc3d
md"""
## Mecanismo de Selecci√≥n

Para seleccionar una soluci√≥n vamos a elegir aleatoriamente dos muestras, y vamos a elegir la que presenta mejor fitness. 
"""

# ‚ïî‚ïê‚ï° dbe29c8e-0c89-42f3-9e98-c1ea854b1bfc
"""
	torneo_binario(vector_fitness)

Devuelve la posici√≥n ganadora de un torneo binario.

### Parametros:
- vector_fitness: Vector de fitness de las soluciones de las que seleccionar.
- verbose: Indica si se desea salida para depurar (false por defecto).

### Devuelve: posici√≥n ganadora.
"""
function torneo_binario(vector_fitness; verbose=false)
	dim = length(vector_fitness)
	pos1 = rand(1:dim)
	pos2 = rand(1:dim)

	# Debe de ser distinto
	while pos2 == pos1
		pos2 = rand(1:dim)
	end

	if verbose
		@debug "Posiciones: $pos1, $pos2"
		@debug "Fitness: $(vector_fitness[pos1]), $(vector_fitness[pos2])"
	end
	
	result = 0

	if vector_fitness[pos1] < vector_fitness[pos2]
		result = pos1
	else
		result = pos2
	end

	return result
end

# ‚ïî‚ïê‚ï° eacab210-b42e-4606-9e86-a6b882cdba6e
md"""
Ejemplo de uso: $(@bind boton_torneo Button(\"Aplica Torneo\"))
"""

# ‚ïî‚ïê‚ï° ba092a34-a5f9-47ba-ace4-b83570c5b717
begin
	boton_torneo
	local vector_fitness = [3, 8, 2, 5, 10, 7, 4]
	local posi = torneo_binario(vector_fitness, verbose=true)
	@debug "Ganador: $posi"
end

# ‚ïî‚ïê‚ï° 2571484f-21ce-45af-bace-4fc4cec62089
md"""
## Operador de Cruce

Para este problema vamos a aplicar el operador OX ya que para este problema es el que da mejor problema, como se ve en el trabajo que [compara distintos operadores de cruce](https://arxiv.org/ftp/arxiv/papers/1203/1203.3097.pdf). 

Este operador OX es el _Ordered Crossover_ (operador de orden) que se caracteriza en que m√°s que intentar mantener de las soluciones originales las posiciones de aparici√≥n de las ciudades busca mantener el orden entre s√≠.

$(RobustLocalResource(\"https://creationwiki.org/pool/images/thumb/d/dc/Ox.png/300px-Ox.png\", "OX.png")).

La idea es la siguiente, dadas dos soluciones se intercambia un segmento elegido aleatoriamente, y el resto de ciudades se van copiando (ignorando las existentes) en el mismo orden. 
"""

# ‚ïî‚ïê‚ï° fa9c4523-c9c0-4ab2-98d1-3e65397e6bd6
md"""
Nos faltan algunas funciones por implementar.
"""

# ‚ïî‚ïê‚ï° 99d32178-8984-403b-8052-e3398b3b8b65
"""
	add_rotate(valor, tope)

Permite incrementar el valor, volviendo al primer valor si se supera el l√≠mite.

### Par√°metros:
- value: valor a incrementar.
- tope: valor m√°ximo.
"""
function add_rotate(valor, tope)
	if valor == tope
		return 1
	else
		return valor+1
	end
end

# ‚ïî‚ïê‚ï° 9285c1b5-7599-4568-b946-2e39290ef0ff
md"""
Vamos a probarlo con unos pocos ejemplos.
"""

# ‚ïî‚ïê‚ï° de419343-3685-445b-a3de-b94f46008c60
begin
	@test add_rotate(1, 4) == 2
	@test add_rotate(2, 4) == 3
	@test add_rotate(3, 4) == 4
	@test add_rotate(4, 4) == 1
end

# ‚ïî‚ïê‚ï° ddaac93b-0c84-4675-9b29-bab93014283d
"""
	rellena_resto(sol, newsol, inicio)

Rellena newsol con los valores de sol desde la posici√≥n inicio, ignorando los ya existentes.
"""
function rellena_resto(sol, newsol, inicio)
	dim = length(sol)
	pos_src = inicio
	pos_dst = inicio
	num = count(!iszero, newsol)
	# @assert iszero(newsol[inicio])
	
	while num < dim
		if sol[pos_src] ‚àâ newsol
			newsol[pos_dst] = sol[pos_src]
			pos_dst = add_rotate(pos_dst, dim)
			num += 1
		end
		pos_src = add_rotate(pos_src, dim)
	end
	return newsol
end

# ‚ïî‚ïê‚ï° 8babcf71-6c3a-49d6-bdb1-e2601bb6bf5f
"""
	crossover_OX(sol1, sol2)

Aplica el cruce entre las soluciones sol1 y sol2, devolviendo dos nuevas soluciones.

### Par√°metros:

- sol1: Primera soluci√≥n.
- sol2: Otra soluci√≥n.
- verbose: Indica si se desea informaci√≥n.

### Devuelve: un par de soluciones.
"""
function crossover_OX(sol1, sol2, verbose=false)
	dim = length(sol1)
	# Obtengo un par aleatorio
	pos1, pos2 = samplepair(dim) 

	# Me aseguro que pos1 sea menor que pos2
	if pos1 > pos2
		pos1, pos2 = pos2, pos1
	end

	if verbose
		@debug pos1
		@debug pos2
	end

	# Creo memoria
	newsol1 = zeros(Int, dim)
	newsol2 = zeros(Int, dim)

	# Intercambio el rango
	for i ‚àà pos1:pos2
		newsol1[i] = sol2[i]
		newsol2[i] = sol1[i]
	end

	# Incrementa la siguiente posici√≥n
	inicio = add_rotate(pos2, dim)
	# Relleno el resto de elementos
	newsol1 .= rellena_resto(sol1, newsol1, inicio)
	newsol2 .= rellena_resto(sol2, newsol2, inicio)
	return newsol1, newsol2
end

# ‚ïî‚ïê‚ï° 4afbe858-3f79-4061-94f5-657e8e36172a
begin
	local sol_rellenada = rellena_resto([1, 3, 2, 4], [0, 1, 2, 0], 4)
	@test all(sol_rellenada .== [3, 1, 2, 4])
	local sol_dibujo = rellena_resto([7, 5, 3, 1, 9, 8, 6, 4, 2], [0, 0, 0, 8, 5, 7, 3, 0, 0], 8)
	@test all(sol_dibujo .== [1, 9, 6, 8, 5, 7, 3, 4, 2])
end

# ‚ïî‚ïê‚ï° a5f2720c-edfb-414a-9bb1-6957b8c6fa81
begin
	local sol1 = new_solution(10)
	local sol2 = new_solution(10)
	local newsol1, newsol2 = crossover_OX(sol1, sol2)
	@test all(crossover_OX(sol1, sol1) .== (sol1, sol1))
end

# ‚ïî‚ïê‚ï° 5f487255-3171-4b50-9e38-fe4146c4115a
md"""
## Reemplazo del AG Estacionario
"""

# ‚ïî‚ïê‚ï° e2b71cc7-e505-4ea1-84dd-6109ec49204c
"""
	reemplaza_peores(newsol1, fitness_sol1, newsol2, fitness_sol2, 
						pop, fitness_pop)

Reemplaza las dos peores soluciones por las nuevas si las mejoran.

### Par√°metros:

- newsol1: Primera nueva soluci√≥n.
- fitness_sol1: Fitness de newsol1.
- newsol2: La otra nueva soluci√≥n.
- fitness_sol2: Fitness de newsol2.
- pop: Poblaci√≥n actual **(es modificada)**.
- fitness_pop: Vector de fitness **(es modificada)**.
"""
function reemplaza_peores!(newsol1, fitness_sol1, newsol2, fitness_sol2, pop, fitness_pop)
	posi_ordenados = indices_ordenados(fitness_pop)
	pos_worst = posi_ordenados[end]
	pos_second_worst = posi_ordenados[end-1]
	worst = pop[pos_worst,:]
	second_worst = pop[pos_second_worst,:]
	minipop_fit = [fitness_sol1, fitness_sol2, fitness_pop[pos_worst], fitness_pop[pos_second_worst]]
	minipop = [newsol1, newsol2, worst, second_worst]
	selected = indices_ordenados(minipop_fit)
	# Reemplazo los dos peores
	pop[pos_worst, :] .= minipop[first(selected)] 
	fitness_pop[pos_worst] = minipop_fit[first(selected)]
	pop[pos_second_worst, :] .= minipop[selected[2]] 
	fitness_pop[pos_second_worst] = minipop_fit[selected[2]]
	nothing
end

# ‚ïî‚ïê‚ï° a4e30c13-e7a6-406e-b8d2-16758231b7ff
begin
	sol1 = [1, 2, 3]
	sol2 = [2, 3, 4]
	pop = zeros(Int, 3, 3)
	fitness_pop = [6, 8, 4]
	reemplaza_peores!(sol1, 3, sol2, 7, pop, fitness_pop)
	@test all(sort(fitness_pop) .== [3, 4, 6])
	pop = zeros(Int, 3, 3)
	fitness_pop = [6, 8, 4]
	reemplaza_peores!(sol1, 9, sol2, 10, pop, fitness_pop)
	@test all(sort(fitness_pop) .== [4, 6, 8])
end

# ‚ïî‚ïê‚ï° 4e9cd677-60f5-4d0b-b882-7c7666f8d5ff
md"""
## Ap√©ndice

Celdas ocultas.
"""

# ‚ïî‚ïê‚ï° e4c005e3-d1bd-47e3-9f66-105931a45f34
begin
	eachsol(pop)=eachrow(pop)
	indices(pop::AbstractVector{T}) where T=eachindex(pop)
	indices(matrix::Matrix{T}) where T=1:size(matrix, 1)
	posicion_aleatoria(pop)=rand(1:size(pop, 1))
	con_probabilidad(prob)=rand() <= prob
	pos_mejor(fit)=argmin(fit)
	pos_peor(fit)=argmax(fit)
	obten_mejor_fitness(fit)=minimum(fit)
	nothing
end

# ‚ïî‚ïê‚ï° 12a0eb6e-080b-442f-aa7b-67be6a13c2d2
function AGG(dimension, popsize, pcross, pmut; maxevals=50_000, historico=Tuple{Int,AbstractVector{<:Integer},Float64}[], copia_historico=false)
	pop = zeros(Int, popsize, dimension)
	# Creo la nueva poblaci√≥n
	newpop = copy(pop)
	
	# Inicializo el vector
	for i in 1:popsize
		pop[i,:] .= new_solution(dimension)
	end

	# Vector de fitness
	fitness_pop = [fitness(sol) for sol in eachsol(pop)]
	mejor = argmin(fitness_pop)
	# Inicio el n√∫mero de evaluaciones
	evals = popsize

	if copia_historico
		push!(historico, (evals, pop[argmin(fitness_pop), :], obten_mejor_fitness(fitness_pop)))
	end
	
	while evals < maxevals
		# Aplico selecci√≥n por torneo
		for i in indices(newpop)
			# Copio el ganador del torneo
			posi = torneo_binario(fitness_pop)
			newpop[i, :] .= pop[posi, :]
		end

		# Empiezo a cruzar de forma consecutiva
		total_cruzar = (popsize*pcross)
		i = 1

		while i < total_cruzar
			sol1 = newpop[i, :]
			sol2 = newpop[i+1, :]
			newsol1, newsol2 = crossover_OX(sol1, sol2)
			newpop[i, :] .= newsol1
			newpop[i+1, :] .= newsol2
			i += 2
		end

		# Mutaci√≥n
		total_mutar = popsize √∑ 10

		for i in enumerate(total_mutar)
			posi = posicion_aleatoria(newpop)
			newpop[posi, :] .= mutation(newpop[posi, :])
		end
		
		# Evaluaci√≥n
		fitness_newpop = [fitness(sol) for sol in eachsol(newpop)]
		evals += popsize

		# Elitismo, no permito que empeore
		if fitness_pop[mejor] < obten_mejor_fitness(fitness_newpop)
			worst = pos_peor(fitness_newpop)
			newpop[worst, :] .= pop[mejor, :]
			fitness_newpop[worst] = fitness_pop[mejor]
		end

		# Reemplazo
		pop .= newpop
		fitness_pop .= fitness_newpop
		mejor = pos_mejor(fitness_pop)
		
		if copia_historico
			push!(historico, (evals, pop[mejor, :], fitness_pop[mejor]))
		end
	
	end

	return pop[mejor, :], fitness_pop[mejor]
end

# ‚ïî‚ïê‚ï° 73dc306d-3904-4c35-899c-05823e2380f2
function AGE(dimension, popsize, p_mut; maxevals=50_000, historico=Tuple{Int, AbstractVector{Integer}, Float64}[], copia_historico=false)
	pop = zeros(Int, popsize, dimension)
	
	# Inicializo el vector
	for i in 1:popsize
		pop[i, :] .= new_solution(dimension)
	end

	# Vector de fitness
	fitness_pop = [fitness(sol) for sol in eachsol(pop)]
	# Inicio el n√∫mero de evaluaciones
	evals = popsize

	if copia_historico
		push!(historico, (evals, pop[pos_mejor(fitness_pop), :], obten_mejor_fitness(fitness_pop)))
	end
	
	@views while evals < maxevals
		# Aplico selecci√≥n por torneo
		posi1 = torneo_binario(fitness_pop)
		posi2 = torneo_binario(fitness_pop)

		# Cruco las soluciones aleatorias
		newsol1, newsol2 = crossover_OX(pop[posi1, :], pop[posi2, :])

		# Mutaci√≥n
		if (con_probabilidad(p_mut))
			newsol1 .= mutation(newsol1)
		end

		if (con_probabilidad(p_mut))
			newsol2 .= mutation(newsol2)
		end
		
		# Evaluaci√≥n
		fitness_sol1 = fitness(newsol1)
		fitness_sol2 = fitness(newsol2)
		evals += 2
			
		# Reemplazo las dos peores
		reemplaza_peores!(newsol1, fitness_sol1, newsol2, fitness_sol2, pop, fitness_pop)
		
		if copia_historico
			push!(historico, (evals, pop[pos_mejor(fitness_pop), :], obten_mejor_fitness(fitness_pop)))
		end
	end

	mejor = pos_mejor(fitness_pop)
	return pop[mejor, :], fitness_pop[mejor]
end

# ‚ïî‚ïê‚ï° 721acdea-79c6-4409-9e52-06f66ebf67d7
begin 
	function AGE_One(dimension, popsize, p_mut; maxevals=50_000, historico=Tuple{Int, AbstractVector{Integer}, Float64}[], copia_historico=false)
	pop = zeros(Int, popsize, dimension)
	
	# Inicializo el vector
	for i in 1:popsize
		pop[i, :] .= new_solution(dimension)
	end

	# Vector de fitness
	fitness_pop = [fitness(sol) for sol in eachsol(pop)]
	# Inicio el n√∫mero de evaluaciones
	evals = popsize
	pos_worst = argmax(fitness_pop)

	if copia_historico
		push!(historico, (evals, pop[argmin(fitness_pop), :], minimum(fitness_pop)))
	end
	
	@views while evals < maxevals
		# Aplico selecci√≥n por torneo
		posi1 = torneo_binario(fitness_pop)
		posi2 = torneo_binario(fitness_pop)

		# Cruco las soluciones aleatorias
		newsol1, newsol2 = crossover_OX(pop[posi1, :], pop[posi2, :])

		# Mutaci√≥n
		if (rand() <= p_mut)
			newsol1 .= mutation(newsol1)
		end

		if (rand() <= p_mut)
			newsol2 .= mutation(newsol2)
		end
		
		# Evaluaci√≥n
		fitness_sol1 = fitness(newsol1)
		fitness_sol2 = fitness(newsol2)
		evals += 2

		if fitness_sol1 < fitness_sol2
			fitness_sol = fitness_sol1
			sol = newsol1
		else
			fitness_sol = fitness_sol2
			sol = newsol2
		end
		# Reemplazo el peor
		if fitness_sol < fitness_pop[pos_worst]
			pop[pos_worst, :] .= sol
			fitness_pop[pos_worst] = fitness_sol
			pos_worst = argmax(fitness_pop)
		end
	
		if copia_historico
			push!(historico, (evals, pop[argmin(fitness_pop), :], minimum(fitness_pop)))
		end
	end

	mejor = argmin(fitness_pop)
	return pop[mejor, :], fitness_pop[mejor]
end
	nothing
end

# ‚ïî‚ïê‚ï° a8657d4f-867b-43b3-8e78-8be73f1ff8ea
begin
	historico_agg = Tuple{Int,Vector{Int},Float64}[]
	historico_age = Tuple{Int,Vector{Int},Float64}[]
	historico_age_one = Tuple{Int,Vector{Int},Float64}[]
	
	seed!(seed_value)
	
	if isempty(online)
		time_agg = @elapsed _, _ = AGG(N, 50, 0.7, 0.1; maxevals=ag_number_evals, copia_historico=true, historico=historico_agg)
		seed!(seed_value)
		time_age = @elapsed _, _ = AGE(N, 50, 0.1; maxevals=ag_number_evals, copia_historico=true, historico=historico_age)
		time_age_one = @elapsed _, _ = AGE_One(N, 50, 0.1; maxevals=ag_number_evals, copia_historico=true, historico=historico_age_one)
	end
	nothing
end

# ‚ïî‚ïê‚ï° bce56ce3-fb2e-4d64-bb2b-97f85a00aa94
begin
	local sol, fit
	if !isempty(online)
		seed!(seed_value)
		(sol, fit) = AGG(N, 50, 0.7, 0.1; maxevals=global_evals_agg)
	else
		encuentra_historico_agg(item)=first(item)>=global_evals_agg
		local item = findfirst(encuentra_historico_agg, historico_agg)
		(_, sol, fit) = historico_agg[item]
	end
	local evals_gga_str = @sprintf "%.2E" global_evals_agg
	plot_sol(sol; title="Resultados AGG: $(evals_gga_str) evals, distancia $(round(fit, digits=1))")
end

# ‚ïî‚ïê‚ï° 05934fbf-e9a3-41e4-a333-18be8eda1275
begin
	if !isempty(historico_agg)
		local x = first.(historico_agg)
		local y = last.(historico_agg)
		plot(x, y, legend=false, xlabel="Evaluaciones", ylabel="Fitness", yscale=:log10, title="Gr√°fica de Convergencia del AG Generacional")
	end
end

# ‚ïî‚ïê‚ï° 16a2aa78-c2d0-4fbc-88e4-fb45032aa14e
begin
	local sol, fit
	if !isempty(online)
		seed!(seed_value)
		(sol, fit) = AGE(N, 50, 0.1; maxevals=global_evals_age)
	else
		encuentra_historico_age(item)=first(item)>=global_evals_age
		local item = findfirst(encuentra_historico_age, historico_age)
		local sol, fit
		(_, sol, fit) = historico_age[item]
	end
	local evals_gga_str = @sprintf "%.2E" global_evals_age
	plot_sol(sol; title="Resultados AGE: $(evals_gga_str) evals, distancia $(round(fit, digits=1))")
end

# ‚ïî‚ïê‚ï° 3be68ad7-75a1-4a4d-a234-2bd24418b963
begin
	if !isempty(historico_age)
		local x = first.(historico_age)
		local y = last.(historico_age)
		plot(x, y, legend=false, xlabel="Evaluaciones", ylabel="Fitness", yscale=:log10, title="Gr√°fica de Convergencia del AG Estacionario")
	end
end

# ‚ïî‚ïê‚ï° e5846c20-63aa-4972-9d00-5839ce9f2128
begin
	local sol_agg, sol_age, fit_agg, fit_age
	local item_age, item_agg
	if isempty(online)

		encuentra_historico_ag(item)=first(item)>=global_evals_ag
		item_age = findfirst(encuentra_historico_ag, historico_age)
		(_, sol_age, fit_age) = historico_age[item_age]
		item_agg = findfirst(encuentra_historico_ag, historico_agg)
		(_, sol_agg, fit_agg) = historico_agg[item_agg]
	local evals_gg_str = @sprintf "%.2E" global_evals_ag
	p_age = plot_sol(sol_age; title="Resultados AGE: $(evals_gg_str) evals, distancia $(round(fit_age, digits=1))")
	p_agg = plot_sol(sol_agg; title="Resultados AGG: $(evals_gg_str) evals, distancia $(round(fit_agg, digits=1))")
	md"""
	$(p_agg)
	$(p_age)
	"""
	end
	
end

# ‚ïî‚ïê‚ï° f512edb8-95ec-485d-9037-81c1062933c1
begin
	local best_agg, best_age, best_age_one
	(_, _, best_agg) = last(historico_agg)
	(_, _, best_age) = last(historico_age)
	(_, _, best_age_one) = last(historico_age_one)
	df = DataFrame("Algoritmo"=>String[], "Mejor Fitness"=>Float64[], "Tiempo" =>Float64[])
	push!(df, ("Generacional", best_agg, time_agg))
	push!(df, ("Estacionario", best_age, time_age))
	# push!(df, ("Estacionario One", best_age_one, time_age_one))
	df
end

# ‚ïî‚ïê‚ï° Cell order:
# ‚ïü‚îÄ3d1cc3c8-dc80-11ed-3163-9d457a2fc8f2
# ‚ïü‚îÄf8623f68-7151-4416-9ffe-87d704ce0aff
# ‚ïü‚îÄ421c26f4-e9fe-4f53-917f-4ade85d96cc7
# ‚ïü‚îÄab1e47c3-3dab-4982-a7ec-7fdd196f5d24
# ‚ïü‚îÄba86256b-134b-4309-88ad-4bf9296c7d42
# ‚ïü‚îÄ903c9853-acdc-4495-855d-3d4ce2242bf3
# ‚ïü‚îÄ85e41585-b696-42e7-80d5-0c980a30a536
# ‚ïü‚îÄ929dbc59-8d47-438c-aa6b-a797cf8cdb73
# ‚ïü‚îÄ04437555-ddb3-49b6-98cc-cf5687af4c08
# ‚ïü‚îÄ08bec682-efa6-4bc0-b739-0ddd02f8f0d8
# ‚ï†‚ïê12a0eb6e-080b-442f-aa7b-67be6a13c2d2
# ‚ïü‚îÄ6f75ee5e-8b40-42ae-b59f-fc17a2c16800
# ‚ï†‚ïê73dc306d-3904-4c35-899c-05823e2380f2
# ‚ïü‚îÄe07d5db1-fedb-4883-9e7b-42bbeb1196c4
# ‚ïü‚îÄe8ccadcf-ae4d-4014-a3bc-0d08b1c7fb58
# ‚ïü‚îÄ441219bc-c438-4159-ad1e-8441cdd850e9
# ‚ïü‚îÄ4e1cf32a-9387-4b6b-b324-d5ecb14e614d
# ‚ïü‚îÄabb709a1-7344-4e84-a24f-443caed0fc00
# ‚ïü‚îÄbce56ce3-fb2e-4d64-bb2b-97f85a00aa94
# ‚ïü‚îÄ05934fbf-e9a3-41e4-a333-18be8eda1275
# ‚ïü‚îÄ1ca679ff-faf5-4194-9da3-3f8811bb3049
# ‚ïü‚îÄ16a2aa78-c2d0-4fbc-88e4-fb45032aa14e
# ‚ïü‚îÄ3be68ad7-75a1-4a4d-a234-2bd24418b963
# ‚ïü‚îÄddb0cea0-dfd7-40a7-a6c3-8dbb68c042d3
# ‚ïü‚îÄe5846c20-63aa-4972-9d00-5839ce9f2128
# ‚ïü‚îÄ2af35bfb-b24f-4210-a0a1-af4879ced7f9
# ‚ïü‚îÄf512edb8-95ec-485d-9037-81c1062933c1
# ‚ïü‚îÄ482a3d43-77b0-4f1a-b2ad-c9ded08f0226
# ‚ïü‚îÄbffa1ef7-b779-46ae-9306-3364aaf0e729
# ‚ïü‚îÄ7d4b2a03-b544-4e7b-a096-a2f97dcaddfa
# ‚ï†‚ïêd098ac9b-526e-47a6-963f-a61b5265e886
# ‚ïü‚îÄacfbad57-b07e-48b4-bb92-ef35350240b7
# ‚ï†‚ïêa647901b-50e1-4430-a85c-2b50c8eae0ff
# ‚ïü‚îÄ76bad016-e20e-4491-b7e2-c47b7eec0a20
# ‚ïü‚îÄac6d750a-658d-4357-b912-4569c61e23ac
# ‚ïü‚îÄf890be4d-60db-4424-99ab-0286ef9b47dd
# ‚ï†‚ïê307784a8-a5f1-4d1c-b228-6c76d26bd863
# ‚ïü‚îÄcb7e1e27-f497-47cb-9fac-1f96c19c99f3
# ‚ïü‚îÄdfd2a922-c497-47f5-992f-d23ae107683b
# ‚ïü‚îÄ170b110d-d1f2-4d3c-a1f7-cf7ac6075a69
# ‚ïü‚îÄ40df03c1-78d5-4720-a00a-c0ed749fdc85
# ‚ïü‚îÄ5be982d9-0e21-44e7-91e9-34d9ae6b1a2b
# ‚ïü‚îÄc940c590-18a4-4885-9cc0-54f5b11d64b9
# ‚ïü‚îÄf8992c2b-62f5-4a9b-8801-3fb99a8dfc3d
# ‚ïü‚îÄdbe29c8e-0c89-42f3-9e98-c1ea854b1bfc
# ‚ïü‚îÄeacab210-b42e-4606-9e86-a6b882cdba6e
# ‚ïü‚îÄba092a34-a5f9-47ba-ace4-b83570c5b717
# ‚ïü‚îÄ2571484f-21ce-45af-bace-4fc4cec62089
# ‚ïü‚îÄ8babcf71-6c3a-49d6-bdb1-e2601bb6bf5f
# ‚ïü‚îÄfa9c4523-c9c0-4ab2-98d1-3e65397e6bd6
# ‚ïü‚îÄ99d32178-8984-403b-8052-e3398b3b8b65
# ‚ïü‚îÄ9285c1b5-7599-4568-b946-2e39290ef0ff
# ‚ï†‚ïêde419343-3685-445b-a3de-b94f46008c60
# ‚ïü‚îÄddaac93b-0c84-4675-9b29-bab93014283d
# ‚ïü‚îÄ4afbe858-3f79-4061-94f5-657e8e36172a
# ‚ïü‚îÄa5f2720c-edfb-414a-9bb1-6957b8c6fa81
# ‚ïü‚îÄ5f487255-3171-4b50-9e38-fe4146c4115a
# ‚ïü‚îÄe2b71cc7-e505-4ea1-84dd-6109ec49204c
# ‚ïü‚îÄa4e30c13-e7a6-406e-b8d2-16758231b7ff
# ‚ïü‚îÄ4e9cd677-60f5-4d0b-b882-7c7666f8d5ff
# ‚ïü‚îÄa8657d4f-867b-43b3-8e78-8be73f1ff8ea
# ‚ïü‚îÄe4c005e3-d1bd-47e3-9f66-105931a45f34
# ‚ïü‚îÄ721acdea-79c6-4409-9e52-06f66ebf67d7
